name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allows manual trigger from GitHub UI
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Required for creating releases
      packages: write  # Required for uploading artifacts
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper versioning
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: 8.5
    
    - name: Extract version from tag or input
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          # Use manual input version
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
    
    - name: Update version in gradle.properties
      run: |
        if [ -f "gradle.properties" ]; then
          sed -i "s/^version=.*/version=${{ steps.version.outputs.VERSION }}/" gradle.properties
          echo "Updated gradle.properties:"
          cat gradle.properties
        else
          echo "version=${{ steps.version.outputs.VERSION }}" > gradle.properties
          echo "Created gradle.properties with version: ${{ steps.version.outputs.VERSION }}"
        fi
    
    - name: Verify Gradle Build File
      run: |
        echo "=== Checking build.gradle ==="
        if [ -f "build.gradle" ]; then
          echo "✅ build.gradle found"
          echo "--- Content preview ---"
          head -20 build.gradle
        else
          echo "❌ build.gradle not found!"
          exit 1
        fi
        echo "=========================="
    
    - name: Clean and Build
      run: |
        echo "🧹 Cleaning previous builds..."
        gradle clean --no-daemon --stacktrace
        
        echo "🔨 Building project..."
        gradle build --no-daemon --stacktrace --info
        
        echo "📦 Creating shadow JAR..."
        gradle shadowJar --no-daemon --stacktrace
    
    - name: Run Tests
      run: |
        echo "🧪 Running tests..."
        gradle test --no-daemon --continue
      continue-on-error: true  # Continue even if tests fail
    
    - name: List Build Outputs
      run: |
        echo "=== Build Directory Structure ==="
        if [ -d "build" ]; then
          find build -type f -name "*.jar" | head -20
          echo ""
          echo "=== Libs Directory ==="
          if [ -d "build/libs" ]; then
            ls -la build/libs/
          else
            echo "No build/libs directory found"
          fi
        else
          echo "No build directory found!"
        fi
        echo "================================="
    
    - name: Find and Prepare JAR
      id: find_jar
      run: |
        # Look for JAR files in build/libs
        if [ -d "build/libs" ]; then
          echo "=== Available JAR files ==="
          ls -la build/libs/
          echo "=========================="
          
          # Expected JAR name
          EXPECTED_NAME="Oxygen-${{ steps.version.outputs.VERSION }}.jar"
          
          # First check if the expected JAR already exists
          if [ -f "build/libs/$EXPECTED_NAME" ]; then
            echo "✅ Found expected JAR: $EXPECTED_NAME"
            JAR_FILE="build/libs/$EXPECTED_NAME"
          else
            # Look for shadow JAR
            SHADOW_JAR=$(find build/libs -name "*-all.jar" | head -1)
            
            if [ -n "$SHADOW_JAR" ]; then
              echo "Found shadow JAR: $SHADOW_JAR"
              JAR_FILE="$SHADOW_JAR"
            else
              # Find any non-source/javadoc JAR
              JAR_FILE=$(find build/libs -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)
            fi
            
            if [ -n "$JAR_FILE" ]; then
              # Only rename if it's not already the expected name
              CURRENT_NAME=$(basename "$JAR_FILE")
              if [ "$CURRENT_NAME" != "$EXPECTED_NAME" ]; then
                echo "Renaming $CURRENT_NAME to $EXPECTED_NAME"
                mv "$JAR_FILE" "build/libs/$EXPECTED_NAME"
                JAR_FILE="build/libs/$EXPECTED_NAME"
              fi
            else
              echo "❌ No JAR file found in build/libs!"
              exit 1
            fi
          fi
          
          if [ -f "$JAR_FILE" ]; then
            echo "JAR_PATH=$JAR_FILE" >> $GITHUB_OUTPUT
            echo "JAR_NAME=$EXPECTED_NAME" >> $GITHUB_OUTPUT
            echo "✅ JAR prepared: $EXPECTED_NAME"
            echo "📦 JAR size: $(du -h $JAR_FILE | cut -f1)"
            
            # Verify JAR content
            echo "🔍 JAR verification:"
            jar tf "$JAR_FILE" | grep -E "(plugin\.yml|Oxygen\.class)" | head -5
          else
            echo "❌ JAR file not found after processing!"
            exit 1
          fi
        else
          echo "❌ No build/libs directory found!"
          exit 1
        fi
    
    - name: Generate Build Report
      if: always()
      run: |
        echo "## 🔨 Build Information" > build-report.md
        echo "- **Version**: ${{ steps.version.outputs.VERSION }}" >> build-report.md
        echo "- **Java Version**: $(java -version 2>&1 | head -n 1)" >> build-report.md
        echo "- **Gradle Version**: $(gradle --version | grep Gradle | head -n 1)" >> build-report.md
        echo "- **Build Time**: $(date)" >> build-report.md
        echo "- **Commit**: ${{ github.sha }}" >> build-report.md
        echo "- **Branch**: ${{ github.ref_name }}" >> build-report.md
        
        if [ -f "${{ steps.find_jar.outputs.JAR_PATH }}" ]; then
          echo "- **JAR File**: ${{ steps.find_jar.outputs.JAR_NAME }}" >> build-report.md
          echo "- **JAR Size**: $(du -h ${{ steps.find_jar.outputs.JAR_PATH }} | cut -f1)" >> build-report.md
          echo "- **Build Status**: ✅ SUCCESS" >> build-report.md
        else
          echo "- **Build Status**: ❌ FAILED" >> build-report.md
        fi
        
        echo "" >> build-report.md
        echo "## 📋 Build Steps" >> build-report.md
        echo "1. ✅ Checkout repository" >> build-report.md
        echo "2. ✅ Setup JDK 17" >> build-report.md
        echo "3. ✅ Setup Gradle 8.5" >> build-report.md
        echo "4. ✅ Update version" >> build-report.md
        echo "5. ✅ Build project" >> build-report.md
        echo "6. ✅ Create JAR" >> build-report.md
    
    - name: Generate Changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          echo "CHANGELOG=🎉 Initial release of Oxygen Plugin" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## 📝 Changes since $LAST_TAG" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%an)" $LAST_TAG..HEAD | head -20 >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event_name == 'push' && github.ref_name || format('v{0}', steps.version.outputs.VERSION) }}
        release_name: 🌌 Oxygen Plugin v${{ steps.version.outputs.VERSION }}
        body: |
          New update from Oxygen plugin!

          Updated:
          - Added PlaceholderAPI supports
              > Available Placeholders:

              * %oxygen_current% or %oxygen_level% - Current oxygen level (number)
              * %oxygen_max% or %oxygen_maximum% - Maximum oxygen level (considers unlimited permission)
              * %oxygen_percentage% or %oxygen_percent% - Oxygen as percentage (e.g., "85.5")
              * %oxygen_bar% or %oxygen_progress% - Visual progress bar (20 characters with colors)
              * %oxygen_status% - Text status: "Healthy", "Low", "Critical", or "Depleted"
              * %oxygen_color% - Color code based on oxygen level (&a, &e, &c, &4)
              * %oxygen_formatted% - Colored display like "&a85&7/100"
              * %oxygen_remaining_time% - Estimated minutes until oxygen depletes

          - Added Potion Effects WEAKNESS, SLOW, NAUSEA of threshold level below 20
          - Fixed BossbarManager class exception from line BossBar.showBossbar(player)
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') || contains(steps.version.outputs.VERSION, 'beta') || contains(steps.version.outputs.VERSION, 'alpha') || contains(steps.version.outputs.VERSION, 'rc') }}
    
    - name: Upload JAR Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_jar.outputs.JAR_PATH }}
        asset_name: ${{ steps.find_jar.outputs.JAR_NAME }}
        asset_content_type: application/java-archive
    
    - name: Upload Build Report
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build-report.md
        asset_name: build-report-v${{ steps.version.outputs.VERSION }}.md
        asset_content_type: text/markdown
    
    - name: Upload to Artifacts (Backup)
      uses: actions/upload-artifact@v4
      with:
        name: Oxygen-${{ steps.version.outputs.VERSION }}
        path: |
          build/libs/*.jar
          build-report.md
        retention-days: 30
    
    - name: Build Summary
      if: always()
      run: |
        echo "## 🎉 Build Complete!" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "- **JAR**: ${{ steps.find_jar.outputs.JAR_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: ${{ steps.create_release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Successfully built and released Oxygen v${{ steps.version.outputs.VERSION }}**" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Build failed - check logs above**" >> $GITHUB_STEP_SUMMARY
        fi
