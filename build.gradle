plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

// Load version from gradle.properties or system property
version = project.hasProperty('version') ? project.version : '1.0-SNAPSHOT'
group = 'org.haile'
archivesBaseName = 'Oxygen'

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

repositories {
    mavenCentral()

    // Paper
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }

    // Sonatype
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    // WorldGuard/WorldEdit
    maven {
        name = 'sk89q-repo'
        url = "https://maven.enginehub.org/repo/"
    }
}

dependencies {
    // Paper API
    compileOnly("io.papermc.paper:paper-api:1.20.4-R0.1-SNAPSHOT")

    // WorldGuard
    compileOnly("com.sk89q.worldguard:worldguard-bukkit:7.0.9")

    // Adventure API (using newer versions)
    implementation("net.kyori:adventure-api:4.21.0")
    implementation("net.kyori:adventure-text-minimessage:4.21.0")
    implementation("net.kyori:adventure-platform-bukkit:4.3.2")

    // JetBrains Annotations
    compileOnly 'org.jetbrains:annotations:24.1.0'

    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation("io.papermc.paper:paper-api:1.20.4-R0.1-SNAPSHOT")
}

// Configure JAR building
jar {
    enabled = false // We'll use shadowJar instead
}

shadowJar {
    archiveClassifier.set('')
    archiveFileName.set("${archivesBaseName}-${version}.jar")

    // Relocate dependencies to prevent conflicts
    relocate 'net.kyori.adventure', 'org.haile.oxygen.libs.adventure'
    relocate 'net.kyori.examination', 'org.haile.oxygen.libs.examination'

    // Include only necessary dependencies
    dependencies {
        include(dependency('net.kyori:adventure-api'))
        include(dependency('net.kyori:adventure-text-minimessage'))
        include(dependency('net.kyori:adventure-platform-bukkit'))
        include(dependency('net.kyori:adventure-text-serializer-legacy'))
        include(dependency('net.kyori:adventure-key'))
        include(dependency('net.kyori:examination-api'))
        include(dependency('net.kyori:examination-string'))
    }

    // Minimize JAR size
    minimize()

    // Set manifest attributes
    manifest {
        attributes(
                'Main-Class': 'org.haile.oxygen.Oxygen',
                'Implementation-Title': 'Oxygen',
                'Implementation-Version': version,
                'Implementation-Vendor': 'haile',
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date().toString(),
                'Built-JDK': System.getProperty('java.version'),
                'Source-Compatibility': sourceCompatibility,
                'Target-Compatibility': targetCompatibility
        )
    }
}

processResources {
    def props = [version: version]
    inputs.properties props

    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

// Configure test task
test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

    // Set system properties for tests
    systemProperty 'file.encoding', 'UTF-8'
    systemProperty 'user.timezone', 'UTC'
}

// Custom task for development build
task devBuild {
    group = 'build'
    description = 'Build plugin for development (with SNAPSHOT version)'

    doFirst {
        version = version.endsWith('-SNAPSHOT') ? version : version + '-SNAPSHOT'
    }

    dependsOn shadowJar
}

// Custom task to prepare for release
task prepareRelease {
    group = 'build'
    description = 'Prepare plugin for release (remove SNAPSHOT from version)'

    doLast {
        def propsFile = file('gradle.properties')
        if (propsFile.exists()) {
            def props = new Properties()
            propsFile.withInputStream { props.load(it) }

            def currentVersion = props.getProperty('version', '1.0.0-SNAPSHOT')
            def releaseVersion = currentVersion.replace('-SNAPSHOT', '')

            props.setProperty('version', releaseVersion)
            propsFile.withOutputStream { props.store(it, 'Updated by prepareRelease task') }

            println "Updated version from ${currentVersion} to ${releaseVersion}"
        }
    }
}

// Set default task
defaultTasks 'clean', 'shadowJar'

// Build configuration
build {
    dependsOn shadowJar
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-Xlint:deprecation', '-Xlint:unchecked'])

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

// Configure Javadoc
javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

// Run Paper configuration
tasks {
    runServer {
        minecraftVersion("1.20.4")
    }
}

// Print build information
gradle.buildFinished { buildResult ->
    if (buildResult.failure == null) {
        println ""
        println "=========================================="
        println "✅ BUILD SUCCESSFUL"
        println "=========================================="
        println "Plugin: ${archivesBaseName}"
        println "Version: ${version}"
        println "Output: build/libs/${archivesBaseName}-${version}.jar"
        println "Size: ${(file("build/libs/${archivesBaseName}-${version}.jar").length() / 1024).round(2)} KB"
        println "=========================================="
    } else {
        println ""
        println "=========================================="
        println "❌ BUILD FAILED"
        println "=========================================="
        println "Error: ${buildResult.failure.message}"
        println "=========================================="
    }
}